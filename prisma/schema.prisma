// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male      @map("Masculino")
  female    @map("Feminino")
  notBinary @map("Não Binário")
  others    @map("Outros")
  notInform @map("Prefiro Não Informar")

  @@map("gender")
}

enum StatusPlan {
  active   @map("ativo")
  inactive @map("inativo")
  deleted  @map("deletado")

  @@map("status_plan")
}

model User {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String?
  email         String         @unique
  cpf           String         @unique
  phone         String
  password      String
  birthdate     DateTime
  gender        Gender
  avatar        String?
  street        String
  city          String
  neighbourhood String
  zipcode       String
  state         String
  country       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Subscription  Subscription[]
  UsersToken    UsersToken[]

  @@map("user")
}

model Manager {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String?
  email         String   @unique
  phone         String
  password      String
  birthdate     DateTime
  gender        Gender
  avatar        String
  street        String
  city          String
  neighbourhood String
  zipcode       String
  state         String
  country       String
  status        Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("manager")
}

model WaitList {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  city           String
  state          String
  note           String
  receiveUpdates Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("waitlist")
}

model Plan {
  id           String         @id @default(uuid())
  title        String         @unique
  description  String
  status       StatusPlan?    @default(active)
  price        Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]

  @@map("plan")
}

model Address {
  id            String         @id @default(uuid())
  street        String
  neighbourhood String
  city          String
  zipcode       String
  state         String
  country       String
  complement    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Subscription  Subscription[]

  @@map("address")
}

model Product {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Plan        Plan[]

  @@map("product")
}

model Coupon {
  id          String    @id @default(uuid())
  title       String
  description String
  benefit     String?
  discount    Float?
  isPermanent Boolean
  initialDate DateTime?
  expiredDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("coupon")
}

model Subscription {
  id             String   @id @default(uuid())
  planId         String   @unique
  userId         String
  status         Boolean
  paymentMethods String
  addressId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  plan           Plan     @relation(fields: [planId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
  address        Address  @relation(fields: [addressId], references: [id])

  @@map("subscription")
}

model UsersToken {
  id         String    @id @default(uuid())
  token      String    @default(uuid())
  used       Boolean   @default(false)
  used_in    DateTime?
  expires_in DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  users_id String
  user     User   @relation(fields: [users_id], references: [id])

  @@map("userstoken")
}
