generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String?
  email         String         @unique
  cpf           String         @unique
  phone         String
  password      String
  birthdate     DateTime
  gender        Gender
  avatar        String?
  street        String
  city          String
  neighbourhood String
  zipcode       String
  state         String
  country       String
  number        String         @default("1")
  complement    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Subscription  Subscription[]
  UsersToken    UsersToken[]

  @@map("user")
}

model Manager {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String?
  email         String   @unique
  phone         String
  password      String
  birthdate     DateTime
  gender        Gender
  avatar        String
  street        String
  city          String
  neighbourhood String
  zipcode       String
  state         String
  country       String
  status        Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("manager")
}

model WaitList {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  city           String
  state          String
  note           String
  receiveUpdates Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("waitlist")
}

model Plan {
  id           String         @id @default(uuid())
  title        String         @unique
  description  String
  price        Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  image        String?
  status       Boolean?       @default(true)
  Subscription Subscription[]

  @@map("plan")
}

model Address {
  id            String   @id @default(uuid())
  street        String
  neighbourhood String
  city          String
  zipcode       String
  state         String
  country       String
  complement    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Order         Order[]

  @@map("address")
}

model Product {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("product")
}

model Coupon {
  id          String    @id @default(uuid())
  titleCode   String    @unique
  description String
  benefit     String?
  discount    Float?
  isPermanent Boolean
  initialDate DateTime?
  expiredDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Order       Order?

  @@map("coupon")
}

model Subscription {
  id        String   @id @default(uuid())
  planId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order     Order[]

  @@map("subscription")
}

model Order {
  id               String         @id @default(uuid())
  subscriptionId   String
  addressId        String
  couponId         String?        @unique
  receiverEmail    String
  receiverCPF      String
  receiverPhone    String
  receiverFullName String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  taxDelivery      Float?
  totalPrice       Float?
  deliveryTime     DateTime?
  formOfPayment    FormOfPayment?
  address          Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  coupon           Coupon?        @relation(fields: [couponId], references: [id], onDelete: Cascade)
  subscription     Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("order")
}

model UsersToken {
  id         String    @id @default(uuid())
  token      String    @default(uuid())
  used       Boolean   @default(false)
  used_in    DateTime?
  expires_in DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  users_id   String
  user       User      @relation(fields: [users_id], references: [id], onDelete: Cascade)

  @@map("userstoken")
}

enum FormOfPayment {
  creditCard @map("Cartão de crédito")
  billet     @map("Boleto")
}

enum Gender {
  male      @map("Masculino")
  female    @map("Feminino")
  notBinary @map("Não Binário")
  others    @map("Outros")
  notInform @map("Prefiro Não Informar")

  @@map("gender")
}
